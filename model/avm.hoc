load_file("nrngui.hoc")

forall delete_section()
//@code
//create a1
create o_x
create o_y
create o_z
create h_ellipse
create v_ellipse
create v_ellipse2

create AVM_soma
create AVM_dend1
create AVM_dend1u// u - up, d - down, l - left, r - right
create AVM_dend1ul
create AVM_dend1ur
create AVM_dend2

create ALML_soma
create ALML_dend1
create ALML_dend1d
create ALML_dend1dl
create ALML_dend2

create ALMR_soma

create AVBR_dend

double AVM_dend1_xyz[10][3]
double AVM_dend1u_xyz[4][3]
double AVM_dend1ul_xyz[4][3]
double AVM_dend1ur_xyz[4][3]
double AVM_dend2_xyz[4][3]

double ALML_dend1_xyz[10][3]
double ALML_dend1d_xyz[4][3]
double ALML_dend1dl_xyz[4][3]
double ALML_dend2_xyz[4][3]

/*
access a1
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV

nseg = 30
pt3dclear()
for i=0,30 {
	x = PI*i/30
	pt3dadd(300*sin(x), 300*cos(x), 300*sin(3*x), 0.35+0.0*sin(4*x))
}
*/

access o_x
insert pas
e_pas = -80.0 // mV
v = -80.0
nseg = 3
for i=0,1 { pt3dadd(i*1000/2, 0, 0, 1.0) }    

access o_y
insert pas
e_pas = -80.0 // mV
v = -80.0
for i=-1,1 { pt3dadd(500, i*35, 0, 1.0) }    

access o_z
insert pas
e_pas = -80.0 // mV
v = -80.0
for i=-1,1 { pt3dadd(500, 0, i*35, 1.0) }    

access h_ellipse
insert pas
e_pas = -80.0 // mV
nseg = 3
for i=0,125 { pt3dadd(500*(1+cos(i/20)), 35*(sin(i/20)), 0, 0.1) }    


access v_ellipse
insert pas
e_pas = -80.0 // mV
v = -80.0
nseg = 3
for i=0,125 { pt3dadd(500*(1+cos(i/20)), 0, 35*(sin(i/20)), 0.1) }    

access v_ellipse2
insert pas
e_pas = -80.0 // mV
v = -80.0
nseg = 3
for i=0,125 { pt3dadd(500, 35*(cos(i/20)), 35*(sin(i/20)), 0.1) }    



access AVM_soma
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 7
insert pas
for i=0,6 { pt3dadd(400, 0, 2.5*(3-i)/3,  2*2.5*sqrt(1-((3-i)/3.1)*((3-i)/3.1)) ) }    

AVM_dend1_xyz[0][0] = x3d(6)
AVM_dend1_xyz[0][1] = y3d(6) 
AVM_dend1_xyz[0][2] = z3d(6)

AVM_dend1_xyz[1][0] = 400 
AVM_dend1_xyz[1][1] =   0 
AVM_dend1_xyz[1][2] = -25

AVM_dend1_xyz[2][0] = 400-5 
AVM_dend1_xyz[2][1] =   0 
AVM_dend1_xyz[2][2] = -30

AVM_dend1_xyz[3][0] = 350 
AVM_dend1_xyz[3][1] = 0 
AVM_dend1_xyz[3][2] = -29

AVM_dend1_xyz[4][0] = 300 
AVM_dend1_xyz[4][1] = 0 
AVM_dend1_xyz[4][2] = -28

AVM_dend1_xyz[5][0] = 250 
AVM_dend1_xyz[5][1] = 0 
AVM_dend1_xyz[5][2] = -26

AVM_dend1_xyz[6][0] = 200 
AVM_dend1_xyz[6][1] = 0 
AVM_dend1_xyz[6][2] = -24.5

AVM_dend1_xyz[7][0] = 180 
AVM_dend1_xyz[7][1] = 0 
AVM_dend1_xyz[7][2] = -23.7

AVM_dend1_xyz[8][0] = 160 
AVM_dend1_xyz[8][1] = 0 
AVM_dend1_xyz[8][2] = -22.5

AVM_dend1_xyz[9][0] = 140 
AVM_dend1_xyz[9][1] = 0 
AVM_dend1_xyz[9][2] = -22

access AVM_dend1
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=10
for i=0,9 { pt3dadd(AVM_dend1_xyz[i][0], AVM_dend1_xyz[i][1], AVM_dend1_xyz[i][2], 0.35+0.0*(3-i)) }

AVM_dend1u_xyz[0][0] = x3d(9) 
AVM_dend1u_xyz[0][1] = y3d(9) 
AVM_dend1u_xyz[0][2] = z3d(9)

AVM_dend1u_xyz[1][0] = 142 
AVM_dend1u_xyz[1][1] =   0 
AVM_dend1u_xyz[1][2] = -20

AVM_dend1u_xyz[2][0] = 142 
AVM_dend1u_xyz[2][1] =   0 
AVM_dend1u_xyz[2][2] = -14

AVM_dend1u_xyz[3][0] = 141 
AVM_dend1u_xyz[3][1] =   0 
AVM_dend1u_xyz[3][2] = -13

//

AVM_dend2_xyz[0][0] = x3d(9) 
AVM_dend2_xyz[0][1] = y3d(9) 
AVM_dend2_xyz[0][2] = z3d(9)

AVM_dend2_xyz[1][0] = 110 
AVM_dend2_xyz[1][1] =   0 
AVM_dend2_xyz[1][2] = -19

AVM_dend2_xyz[2][0] =  80 
AVM_dend2_xyz[2][1] =   0 
AVM_dend2_xyz[2][2] = -16.5

AVM_dend2_xyz[3][0] =  50 
AVM_dend2_xyz[3][1] =   0 
AVM_dend2_xyz[3][2] = -13


access AVM_dend1u
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(AVM_dend1u_xyz[i][0], AVM_dend1u_xyz[i][1], AVM_dend1u_xyz[i][2], 0.35+0.0*(3-i)) }

//============= left

AVM_dend1ul_xyz[0][0] = x3d(3) 
AVM_dend1ul_xyz[0][1] = y3d(3) 
AVM_dend1ul_xyz[0][2] = z3d(3)

AVM_dend1ul_xyz[1][0] = 139 
AVM_dend1ul_xyz[1][1] =   3 
AVM_dend1ul_xyz[1][2] = -13

AVM_dend1ul_xyz[2][0] = 137 
AVM_dend1ul_xyz[2][1] =   6 
AVM_dend1ul_xyz[2][2] = -11

AVM_dend1ul_xyz[3][0] = 135 
AVM_dend1ul_xyz[3][1] =   7 
AVM_dend1ul_xyz[3][2] =  -9

//================= right

AVM_dend1ur_xyz[0][0] = x3d(3) 
AVM_dend1ur_xyz[0][1] = y3d(3) 
AVM_dend1ur_xyz[0][2] = z3d(3)

AVM_dend1ur_xyz[1][0] = 139 
AVM_dend1ur_xyz[1][1] =  -3 
AVM_dend1ur_xyz[1][2] = -13

AVM_dend1ur_xyz[2][0] = 137 
AVM_dend1ur_xyz[2][1] =  -6 
AVM_dend1ur_xyz[2][2] = -11

AVM_dend1ur_xyz[3][0] = 135 
AVM_dend1ur_xyz[3][1] =  -7 
AVM_dend1ur_xyz[3][2] =  -9


access AVM_dend1ul
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(AVM_dend1ul_xyz[i][0], AVM_dend1ul_xyz[i][1], AVM_dend1ul_xyz[i][2], 0.35+0.0*(3-i)) }

access AVM_dend1ur
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(AVM_dend1ur_xyz[i][0], AVM_dend1ur_xyz[i][1], AVM_dend1ur_xyz[i][2], 0.35+0.0*(3-i)) }

access AVM_dend2
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(AVM_dend2_xyz[i][0], AVM_dend2_xyz[i][1], AVM_dend2_xyz[i][2], 0.35+0.0*(3-i)) }


connect AVM_dend1(0),AVM_soma(1)
connect AVM_dend1u(0),AVM_dend1(1)
connect AVM_dend1ul(0),AVM_dend1u(1)
connect AVM_dend1ur(0),AVM_dend1u(1)
connect AVM_dend2(0),AVM_dend1(1)

//=========================================================
//                 ALML                                  //
//=========================================================

access ALML_soma
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 7
insert pas
for i=0,6 { pt3dadd(400+2.5*(3-i)/3, -25, 25,  2*2.5*sqrt(1-((3-i)/3.1)*((3-i)/3.1)) ) }    

ALML_dend1_xyz[0][0] = x3d(6)
ALML_dend1_xyz[0][1] = y3d(6) 
ALML_dend1_xyz[0][2] = z3d(6)

ALML_dend1_xyz[1][0] = 400 
ALML_dend1_xyz[1][1] = -24 
ALML_dend1_xyz[1][2] =  24

ALML_dend1_xyz[2][0] = 350 
ALML_dend1_xyz[2][1] = -23 
ALML_dend1_xyz[2][2] =  23

ALML_dend1_xyz[3][0] = 300 
ALML_dend1_xyz[3][1] = -22 
ALML_dend1_xyz[3][2] =  22

ALML_dend1_xyz[4][0] = 250 
ALML_dend1_xyz[4][1] = -21 
ALML_dend1_xyz[4][2] =  21

ALML_dend1_xyz[5][0] = 200 
ALML_dend1_xyz[5][1] = -20 
ALML_dend1_xyz[5][2] =  20

ALML_dend1_xyz[6][0] = 180 
ALML_dend1_xyz[6][1] = -18 
ALML_dend1_xyz[6][2] =  18

ALML_dend1_xyz[7][0] = 160 
ALML_dend1_xyz[7][1] = -17 
ALML_dend1_xyz[7][2] =  17

ALML_dend1_xyz[8][0] = 140 
ALML_dend1_xyz[8][1] = -16 
ALML_dend1_xyz[8][2] =  16

ALML_dend1_xyz[9][0] = 130 
ALML_dend1_xyz[9][1] = -15 
ALML_dend1_xyz[9][2] =  15

access ALML_dend1
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=10
for i=0,9 { pt3dadd(ALML_dend1_xyz[i][0], ALML_dend1_xyz[i][1], ALML_dend1_xyz[i][2], 0.35+0.0*(3-i)) }

ALML_dend1d_xyz[0][0] = x3d(9) 
ALML_dend1d_xyz[0][1] = y3d(9) 
ALML_dend1d_xyz[0][2] = z3d(9)

ALML_dend1d_xyz[1][0] = 127 
ALML_dend1d_xyz[1][1] = -13  
ALML_dend1d_xyz[1][2] =  13

ALML_dend1d_xyz[2][0] = 124 
ALML_dend1d_xyz[2][1] = -11  
ALML_dend1d_xyz[2][2] =  11

ALML_dend1d_xyz[3][0] = 120 
ALML_dend1d_xyz[3][1] =  -9 
ALML_dend1d_xyz[3][2] =   9

//

ALML_dend2_xyz[0][0] = x3d(9) 
ALML_dend2_xyz[0][1] = y3d(9) 
ALML_dend2_xyz[0][2] = z3d(9)

ALML_dend2_xyz[1][0] = 110 
ALML_dend2_xyz[1][1] = -13  
ALML_dend2_xyz[1][2] =  13

ALML_dend2_xyz[2][0] =  80 
ALML_dend2_xyz[2][1] = -11  
ALML_dend2_xyz[2][2] =  11

ALML_dend2_xyz[3][0] =  50 
ALML_dend2_xyz[3][1] =  -9 
ALML_dend2_xyz[3][2] =   9


access ALML_dend1d
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(ALML_dend1d_xyz[i][0], ALML_dend1d_xyz[i][1], ALML_dend1d_xyz[i][2], 0.35+0.0*(3-i)) }

ALML_dend1dl_xyz[0][0] = x3d(3) 
ALML_dend1dl_xyz[0][1] = y3d(3) 
ALML_dend1dl_xyz[0][2] = z3d(3)

ALML_dend1dl_xyz[1][0] = 125 
ALML_dend1dl_xyz[1][1] =  -9  
ALML_dend1dl_xyz[1][2] =   5

ALML_dend1dl_xyz[2][0] = 130 
ALML_dend1dl_xyz[2][1] =  -8  
ALML_dend1dl_xyz[2][2] =  -2

ALML_dend1dl_xyz[3][0] = 135 
ALML_dend1dl_xyz[3][1] =  -7+0.75 
ALML_dend1dl_xyz[3][2] =  -9+0.75 

access ALML_dend1dl
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(ALML_dend1dl_xyz[i][0], ALML_dend1dl_xyz[i][1], ALML_dend1dl_xyz[i][2], 0.35+0.0*(3-i)) }

access ALML_dend2
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg=4
for i=0,3 { pt3dadd(ALML_dend2_xyz[i][0], ALML_dend2_xyz[i][1], ALML_dend2_xyz[i][2], 0.35+0.0*(3-i)) }


connect ALML_dend1(0),ALML_soma(1)
connect ALML_dend1d(0),ALML_dend1(1)
connect ALML_dend1dl(0),ALML_dend1d(1)
connect ALML_dend2(0),ALML_dend1(1)


//=========================================================
//                 ALMR                                  //
//=========================================================

access ALMR_soma
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 7
insert pas
for i=0,6 { pt3dadd(400+2.5*(3-i)/3,  25, 25,  2*2.5*sqrt(1-((3-i)/3.1)*((3-i)/3.1)) ) }    


//=========================================================
//                 AVBR                                  //
//=========================================================

access AVBR_dend
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 50
insert pas
pt3dadd(  30, 20, 0, 0.35 )    
pt3dadd( 970, 20, 0, 0.35 )    

//=========================================================


//======================================
//    G A P    J U N C T I O N
//======================================
// run mknrndll.hoc to compile gap.mod
// this will create nrnmech.dll
//======================================
objref gapsyn1, gapsyn2

ALML_dend1dl gapsyn1 = new gap(1.0)
AVM_dend1ul gapsyn2 = new gap(1.0)

// gap junction conductance, according to 
// http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0076877
// has a value of about 2.3 ps = 2.3e-12 s, which corresponds to 
// resistance value of 1/2.3e-12 = 0.43e+12 = 0.43e+3 Gohm = 0.43e+6 megohm

// another paper (http://arxiv.org/pdf/0907.2373.pdf)
// estimates C. elegans gap junction conductance as 200 ps
// which corresponds to resistance = 1/200e-12 = 0.5e+10 = 5e3 megohm 
gapsyn1.r = 5e3 //megohm
gapsyn2.r = 5e3 //megohm

setpointer gapsyn1.vgap, AVM_dend1ul.v(1.0) 
setpointer gapsyn2.vgap, ALML_dend1dl.v(1.0)

//=================================
//        S Y N A P S E S
//=================================
// Placing synapse on axon2 #dend2

objectvar syn1
AVBR_dend {
//dend2{
syn1 = new Exp2Syn(0.10) // Inserts ExpSyn 0.10 of way down dend2
syn1.tau1 =  0.10 // ms, rise time
syn1.tau2 =  10.0 // ms, decay time
syn1.e    = -10.0 // mV, reversal potential
}

// http://thesis.library.caltech.edu/5848/1/thesis.pdf
// The synaptic potential in C. elegans neurons appears
// to reverse between -20 mV and 0 mV ( measured for 
// chemical synapse AFD-->AIY )
// So, let's take an average = -10 mV

// Connecting axon1 to dend2

access AVM_dend1ur
objectvar connection1                 //threshold (mV), delay (ms), weight
                                      //  "-------------------. "----. \    
connection1 = new NetCon( /*&axon1*/ &AVM_dend1ur.v(0.5), syn1, -10.0, 2, 1 )

// The delay parameter (the fourth parameter) specifies the delay
// in milliseconds of the connection. 
// The weight connection specifies the strength of the connection.
// The threshold parameter is important when the source is a real
// neuron rather than an artificial one


//===========================================

access AVM_dend1
objectvar stim1
stim1 = new IClamp (0.5)
stim1.del = 10 //ms
stim1.dur = 90 //ms
stim1.amp = 0.008 //0.003 //nA

/*
access a1
objectvar stim2
stim2 = new IClamp (0.1)
stim2.del = 10 //ms
stim2.dur = 90 //ms
stim2.amp = 0.01 //nA

print L
for (x) print x, diam(x), area(x), PI*diam(x)*L/nseg, ri(x), .01*Ra*(L/2/nseg)/(PI*(diam(x)/2)^2)
*/

    objref ps
    ps = new PlotShape(0)
    ps.rotate(0,0,0,1,0,0.01)
    ps.variable("v")
    ps.view(-1,-1,1,1, 800, 125, 800, 400)
    fast_flush_list.append(ps)
    //forall ps.len_scale(0.001) // so that even the thinnest section is clearly visible
    // revised .size & .view args are for this len_scale
    ps.exec_menu("Show Diam")
    ps.exec_menu("View = plot") // makes sure the entire cell fits in the window
    ps.exec_menu("Shape Plot") // v depicted via colormap
    // to use a different scale with this colormap
    // ps.scale(low, high)

xpanel("RunControl", 0)
v_init = -40//-65
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 400
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 5
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 0.025
xvalue("t","t", 2 )
tstop    = 400.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
xcheckbox("Quiet",&stdrun_quiet,"")
realtime = 0
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(5,123)



objref vg1
vg1 = new Graph(0)  // creates but does not display a new Graph

objref vg2
vg2 = new Graph(0)  // creates but does not display a new Graph


//vg.size(0,tstop,-10,5)  // axis scaling
// forget about the scene_vector stuff
vg1.view(0, -80.0, tstop, 120.0, 312, 125, 345, 200)  // draws it on the screen
// in a window with user-specified location (5th and 6th args) and size (last 2 args)

vg2.view(0, -80.0, tstop, 120.0, 312, 125+340+5, 345, 200)

graphList[0].append(vg1) // graphList[0] is for all objects that are 
			// to be updated at integer multiples of dt
graphList[0].append(vg2)

vg2.addexpr("AVM_dend1.v(0.1)", 1, 1, 0.8, 0.9, 2)
vg2.addexpr("AVM_dend1.v(0.5)", 2, 1, 0.8, 0.9, 2)
vg2.addexpr("AVM_dend1.v(0.9)", 3, 1, 0.8, 0.9, 2)
vg2.addexpr("AVBR_dend.v(0.0)", 4, 1, 0.8, 0.9, 2)
vg2.addexpr("AVBR_dend.v(0.5)", 5, 1, 0.8, 0.9, 2)
vg2.addexpr("AVBR_dend.v(1.0)", 6, 1, 0.8, 0.9, 2)
