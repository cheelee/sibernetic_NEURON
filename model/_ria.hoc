load_file("nrngui.hoc")

forall delete_section()
//@code
//create a1
create o_x
create o_y
create o_z
create h_ellipse
create v_ellipse
create v_ellipse2

//////////////////////////////
create AWCL_soma
create AWCL_dend_a
create AWCL_dend_p
//create AWCL_dend_p1
//create AWCL_dend_p2
//create AWCL_dend_s1
//create AWCL_dend_s2
//create AWCL_dend_ring
//////////////////////////////
create AIY_
//////////////////////////////
create RIAL_
//////////////////////////////
create SMDVR_p
create SMDVR_l
create SMDVR_r
//////////////////////////////
create SMDDR_p
create SMDDR_l
create SMDDR_r
//////////////////////////////
create SMDDR_mus
//////////////////////////////

access o_x
insert pas
e_pas = -80.0 // mV
v = -80.0
nseg = 3
for i=0,1 { pt3dadd(i*130, 0, 0, 0.1) }    

access o_y
insert pas
e_pas = -80.0 // mV
v = -80.0
for i=-1,1 { pt3dadd(130, i*24, 0, 0.1) }    

access o_z
insert pas
e_pas = -80.0 // mV
v = -80.0
for i=-1,1 { pt3dadd(130, 0, i*24, 0.1) }    

access h_ellipse
insert pas
e_pas = -80.0 // mV
nseg = 3
for i= 46,80 { pt3dadd(500*(1+cos(i/20)), 35*(sin(i/20)), 0, 0.1) }    


access v_ellipse
insert pas
e_pas = -80.0 // mV
v = -80.0
nseg = 3
for i=46,80 { pt3dadd(500*(1+cos(i/20)), 0, 35*(sin(i/20)), 0.1) }    

access v_ellipse2
insert pas
e_pas = -80.0 // mV
v = -80.0
nseg = 3
for i=0,125 { pt3dadd(130, 24*(cos(i/20)), 24*(sin(i/20)), 0.1) }    

//////////////////////////////
access AWCL_soma
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 7*3
insert pas
pt3dadd(120, -12, -5, 0.2 )
pt3dadd(120.66, -12, -5.66, 1 )
pt3dadd(121.33, -12, -6.33, 3 )
pt3dadd(122, -12, -7, 4 )
pt3dadd(122.66, -12, -7.66, 3 )
pt3dadd(123.33, -12, -8.33, 1 )
pt3dadd(124, -12, -9, 0.2 )

//////////////////////////////
access AWCL_dend_a
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 4*3
pt3dadd(  1,  -1,    0, 0.2 ) 
pt3dadd( 70, -14, -0.1, 0.2 ) 
pt3dadd(105,-14.5,  -2, 0.2 ) 
pt3dadd(120, -12,  -5, 0.2 ) 
//////////////////////////////
access AWCL_dend_p
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 12*3
pt3dadd(124, -12, -9, 0.2 ) 
pt3dadd(130, -11,-11, 0.2 ) 
pt3dadd(145, -12,-13, 0.2 ) 
pt3dadd(145,  -8,-15, 0.2 ) 
pt3dadd(125,  -5,-14, 0.2 ) 
pt3dadd(114,  -5,-12, 0.2 ) 
pt3dadd(109.8, -12, -5, 0.2 ) 
pt3dadd(104.2, -12,  5, 0.2 ) 
pt3dadd(100,  -5, 12, 0.2 ) 
pt3dadd(100,   5, 12, 0.2 ) 
pt3dadd(104.2,  12,  5, 0.2 ) 
pt3dadd(109.8,  12, -5, 0.2 ) 
pt3dadd(114,   5,-12, 0.2 )

/////////////////////////////

access AIY_
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 20*3
pt3dadd(168,  -15,-18, 0.2 )
pt3dadd(167,  -15,-18, 3.0 )
pt3dadd(166,  -15,-18, 4.0 )
pt3dadd(165,  -15,-18, 3.0 )
pt3dadd(164,  -15,-18, 0.2 )
pt3dadd(124,  -5.2,-15, 0.2 )
pt3dadd(114,  -5.2,-12.5, 0.2 )
pt3dadd(109.8, -12.5, -5.2, 0.2 )
pt3dadd(104.2, -12.5,  5.2, 0.2 )
pt3dadd(100,  -5.2, 12.5, 0.2 )
pt3dadd(100,   5.2, 12.5, 0.2 )
pt3dadd(104.2,  12.5,  5.2, 0.2 )
pt3dadd(109.8,  12.5, -5.2, 0.2 )
pt3dadd(114,   5.2,-12.5, 0.2 )
pt3dadd(124,   5.2,-15, 0.2 )
pt3dadd(164,   15,-18, 0.2 )
pt3dadd(165,   15,-18, 3.0 )
pt3dadd(166,   15,-18, 4.0 )
pt3dadd(167,   15,-18, 3.0 )
pt3dadd(168,   15,-18, 0.2 )
//////////////////////////////
access RIAL_
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 19*3
//pt3dadd(168,  -15,-18, 0.2 ) 
//pt3dadd(166,  -15,-18, 4.0 ) 
//pt3dadd(164,  -15,-18, 0.2 ) 
//pt3dadd(114,  -5.2,-15, 0.2 ) 

pt3dadd(122,  -16, 6, 0.2 )
pt3dadd(121,  -16, 6, 3.0 )
pt3dadd(120,  -16, 6, 4.0 )
pt3dadd(119,  -16, 6, 3.0 )
pt3dadd(118,  -16, 6, 0.2 )
pt3dadd(114,  -18, 3, 0.2 )
pt3dadd(118,  -12,-11, 0.2 )
pt3dadd(124,  -12,-17, 0.2 )
pt3dadd(150,  -17,-19, 0.2 )
pt3dadd(149,  -12.5,-17.5, 0.2 )
pt3dadd(124,  -6.0,-15.0, 0.2 )
pt3dadd(114,  -5.5,-12.9, 0.2 )
pt3dadd(109.8, -13.0, -5.4, 0.2 )
pt3dadd(104.2, -13.0,  5.4, 0.2 )
pt3dadd(100,  -5.4, 13.0, 0.2 )
pt3dadd(100,   5.4, 13.0, 0.2 )
pt3dadd(104.2,  13.0,  5.4, 0.2 )
pt3dadd(109.8,  13.0, -5.4, 0.2 )
pt3dadd(114,   5.5,-12.9, 0.2 )

//pt3dadd(114,   5.2,-15, 0.2 )
//pt3dadd(164,   15,-18, 0.2 )
//pt3dadd(166,   15,-18, 4.0 )
//pt3dadd(168,   15,-18, 0.2 )
//////////////////////////////

access SMDVR_p
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 1*3
pt3dadd(180.0,  -22, -19, 0.2 )
pt3dadd(120.0,  -15, -15, 0.2 ) 
pt3dadd(/*102.1*/111.9,  -9.6, -9.5, 0.2 ) 

/*pt3dadd(104.2, -13.0,  5.4, 0.2 ) 
pt3dadd(100,  -5.4, 13.0, 0.2 ) 
pt3dadd(100,   5.4, 13.0, 0.2 ) 
pt3dadd(104.2,  13.0,  5.4, 0.2 ) 
pt3dadd(109.8,  13.0, -5.4, 0.2 ) 
pt3dadd(114,   5.5,-12.9, 0.2 )*/
//////////////////////////////
access SMDVR_l
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 1*3
pt3dadd(/*102.1*/111.9, -9.6, -9.5, 0.2 ) 
pt3dadd(/*100*/114.0,  -5.7, -13.4, 0.2 ) 
//////////////////////////////
access SMDVR_r
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 1*3
pt3dadd(/*102.1*/111.9,  -9.6, -9.5, 0.2 ) 
pt3dadd(/*104.2*/109.8, -13.5,  -5.6, 0.2 ) 
////////////////////////////////////////////////////////////
access SMDDR_p
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 1*3
pt3dadd(180.0,  -19, 19, 0.2 ) 
pt3dadd(120.0,  -15, 15, 0.2 ) 
pt3dadd(102.1,  -9.6, 9.5, 0.2 ) 
//////////////////////////////
access SMDDR_l
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 1*3
pt3dadd(102.1,  -9.6, 9.5, 0.2 ) 
pt3dadd(100.0,  -5.7, 13.4, 0.2 ) 
//////////////////////////////
access SMDDR_r
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
v = -40.0
nseg = 1*3
pt3dadd(102.1,  -9.6, 9.5, 0.2 ) 
pt3dadd(104.2, -13.5,  5.6, 0.2 ) 
////////////////////////////////////////////////////////////
access SMDDR_mus
Ra=180   
insert pas
g_pas = 6.67e-06 // S/cm2
e_pas = -40.0 // mV
//insert hh
v = -40.0
nseg = 3*3
pt3dadd(102.1, -9.6, 9.5, 0.2 )
pt3dadd(92.1, -11.8, 11.8, 0.2 )
pt3dadd(92.1, -12.0, 12.0, 2.0 )
pt3dadd(70.0, -12.6, 12.6, 2.0 ) 
////////////////////////////////////////////////////////////

//pt3dadd(100,  -5.4, 13.0, 0.2 ) 
//pt3dadd(100,   5.4, 13.0, 0.2 )

connect AWCL_soma(0),AWCL_dend_a(1)
connect AWCL_dend_p(0),AWCL_soma(1)
connect SMDDR_l(0),SMDDR_p(1)
connect SMDDR_r(0),SMDDR_p(1)
//connect AWCL_dend_p2(0),AWCL_dend_p1(1)
//connect AWCL_dend_ring(0), AWCL_dend_p2(1)
//connect AWCL_dend_s1(0), AWCL_dend_p1(1)
//connect AWCL_dend_s2(0), AWCL_dend_p2(1)


//======================================
//    G A P    J U N C T I O N
//======================================
// run mknrndll.hoc to compile gap.mod
// this will create nrnmech.dll
//======================================
/*objref gapsyn1, gapsyn2

ALML_dend1dl gapsyn1 = new gap(1.0)
AVM_dend1ul gapsyn2 = new gap(1.0)
*/
// gap junction conductance, according to 
// http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0076877
// has a value of about 2.3 ps = 2.3e-12 s, which corresponds to 
// resistance value of 1/2.3e-12 = 0.43e+12 = 0.43e+3 Gohm = 0.43e+6 megohm

// another paper (http://arxiv.org/pdf/0907.2373.pdf)
// estimates C. elegans gap junction conductance as 200 ps
// which corresponds to resistance = 1/200e-12 = 0.5e+10 = 5e3 megohm 
/*
gapsyn1.r = 5e3 //megohm
gapsyn2.r = 5e3 //megohm

setpointer gapsyn1.vgap, AVM_dend1ul.v(1.0) 
setpointer gapsyn2.vgap, ALML_dend1dl.v(1.0)
*/

//=================================
//        S Y N A P S E S
//=================================
// Placing synapse on AIY from #AWCL_dend_p

objectvar syn1
AIY_ {
syn1 = new Exp2Syn(0.60) // Inserts ExpSyn 0.60 of way down AIY_
syn1.tau1 =  0.10 // ms, rise time
syn1.tau2 =   2.0 // ms, decay time
syn1.e    = -10.0 // mV, reversal potential
}

// http://thesis.library.caltech.edu/5848/1/thesis.pdf
// The synaptic potential in C. elegans neurons appears
// to reverse between -20 mV and 0 mV ( measured for 
// chemical synapse AFD-->AIY_ )
// So, let's take an average = -10 mV

// Connecting axon1 to dend2

access AWCL_dend_p
objectvar connection1                 //threshold (mV), delay (ms), weight
                                      //  "-------------------. "---.  \    
connection1 = new NetCon( /*&axon1*/ &AWCL_dend_p.v(0.99), syn1, -10.0, 2, 1 )

// The delay parameter (the fourth parameter) specifies the delay
// in milliseconds of the connection. 
// The weight connection specifies the strength of the connection.
// The threshold parameter is important when the source is a real
// neuron rather than an artificial one
//......................................................
objectvar syn2
AIY_ {
syn2 = new Exp2Syn(0.40) // Inserts ExpSyn 0.40 of way down AIY_
syn2.tau1 =  0.10 // ms, rise time
syn2.tau2 =   2.0 // ms, decay time
syn2.e    = -10.0 // mV, reversal potential
}
access AWCL_dend_p
objectvar connection2                 //threshold (mV), delay (ms), weight
                                      //  "------------------. "----.  \    
connection2 = new NetCon( /*&axon1*/ &AWCL_dend_p.v(0.80), syn2, -10.0, 2, 1 )
//......................................................
objectvar syn3
RIAL_{
syn3 = new Exp2Syn(0.50) // Inserts ExpSyn 0.50 of way down RIAL_
syn3.tau1 =  0.10 // ms, rise time
syn3.tau2 =   2.0 // ms, decay time
syn3.e    = -65.0 // mV, reversal potential
}
access AIY_
objectvar connection3                 //threshold (mV), delay (ms), weight
                                      //  "---------------. "---.   /    
connection3 = new NetCon( /*&axon1*/ &AIY_.v(0.30), syn3, -11.0, 2, 1 )

//===========================================
/**/
objectvar syn4
SMDDR_r {
syn4 = new Exp2Syn(0.80) // Inserts ExpSyn 0.80 of way down ...
syn4.tau1 =  0.10 // ms, rise time
syn4.tau2 =   2.0 // ms, decay time
syn4.e    = -65.0 // mV, reversal potential
}
access RIAL_
objectvar connection4       //threshold (mV), delay (ms), weight
                            // "---------------. "---.   /    
connection4 = new NetCon( &RIAL_.v(0.69), syn4, -11.0, 2, 0.2 ) // Inhibitory synapse from RIAL_ to SMDDR_r

//===========================================

objectvar syn5
SMDDR_l {
syn5 = new Exp2Syn(0.80) // Inserts ExpSyn 0.80 of way down ...
syn5.tau1 =  0.10 // ms, rise time
syn5.tau2 =   2.0 // ms, decay time
syn5.e    = -65.0 // mV, reversal potential
}
access RIAL_
objectvar connection5       //threshold (mV), delay (ms), weight
                            // "---------------. "---.   /    
connection5 = new NetCon( &RIAL_.v(0.74), syn5, -11.0, 2, 0.2 ) // Inhibitory synapse from RIAL_ to SMDDR_l
/**/
//===========================================

objectvar syn6
RIAL_ {
syn6 = new Exp2Syn(0.71) // Inserts ExpSyn 0.71 of way down ...
syn6.tau1 =  0.10 // ms, rise time
syn6.tau2 =   2.0 // ms, decay time
syn6.e    = -10.0 // mV, reversal potential
}
access SMDDR_r
objectvar connection6          //threshold (mV), delay (ms), weight
                               // "---------------. "---.   /    
connection6 = new NetCon( &SMDDR_r.v(0.1), syn6, -11.0, 2, 1 ) // Excitatory synapse from SMDDR_r to RIAL_

//===========================================

objectvar syn7
SMDDR_mus {
syn7 = new Exp2Syn(0.01) // Inserts ExpSyn 0.01 of way down ...
syn7.tau1 =  0.10 // ms, rise time
syn7.tau2 =   2.0 // ms, decay time
syn7.e    = -10.0 // mV, reversal potential
}
access SMDDR_r
objectvar connection7          //threshold (mV), delay (ms), weight
                               // "---------------. "---.   /    
connection7 = new NetCon( &SMDDR_r.v(0.1), syn7, -11.0, 2, 1 ) // Excitatory synapse from SMDDR_p to SMDDR_mus

//===========================================

/**/
access AWCL_dend_a
objectvar AWCL_stim01
AWCL_stim01 = new IClamp (0.01)
AWCL_stim01.del = 50 //ms
AWCL_stim01.dur = 60 //ms
AWCL_stim01.amp = 0.002 //nA
/**/

/*access RIAL_
objectvar RIAL_stim01
RIAL_stim01 = new IClamp (0.72 )
RIAL_stim01.del = 20 //ms
RIAL_stim01.dur = 10 //ms
RIAL_stim01.amp = 0.005 //nA
*/

/*
access SMDDR_r
objectvar SMDDR_r_stim01
SMDDR_r_stim01 = new IClamp (0.2 )
SMDDR_r_stim01.del = 2 //ms
SMDDR_r_stim01.dur = 10 //ms
SMDDR_r_stim01.amp = 0.005
*/

access SMDDR_p
objectvar SMDDR_p_stim01
SMDDR_p_stim01 = new IClamp (0.05 )
SMDDR_p_stim01.del = 20 //ms
SMDDR_p_stim01.dur = 150 //ms
SMDDR_p_stim01.amp = 0.002

    objref ps
    ps = new PlotShape(0)
    ps.rotate(0,0,0,1,0,0.01)
    ps.variable("v")
    ps.view(-1,-1,1,1, 800, 125, 800, 400)
    fast_flush_list.append(ps)
    //forall ps.len_scale(0.001) // so that even the thinnest section is clearly visible
    // revised .size & .view args are for this len_scale
    ps.exec_menu("Show Diam")
    ps.exec_menu("View = plot") // makes sure the entire cell fits in the window
    ps.exec_menu("Shape Plot") // v depicted via colormap
    // to use a different scale with this colormap
    // ps.scale(low, high)

xpanel("RunControl", 0)
v_init = -40//-65
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 400
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 5
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 0.025
xvalue("t","t", 2 )
tstop    = 400.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
xcheckbox("Quiet",&stdrun_quiet,"")
realtime = 0
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(5,123)



objref vg1
vg1 = new Graph(0)  // creates but does not display a new Graph

objref vg2
vg2 = new Graph(0)  // creates but does not display a new Graph


//vg.size(0,tstop,-10,5)  // axis scaling
// forget about the scene_vector stuff
vg1.view(0, -80.0, tstop, 120.0, 312, 125, 345, 200)  // draws it on the screen
// in a window with user-specified location (5th and 6th args) and size (last 2 args)

vg2.view(0, -80.0, tstop, 120.0, 312, 125+340+5, 345, 200)

graphList[0].append(vg1) // graphList[0] is for all objects that are 
			// to be updated at integer multiples of dt
graphList[0].append(vg2)


vg1.addexpr("AIY_.v(0.3)", 1, 1, 0.8, 0.9, 2)
vg1.addexpr("RIAL_.v(0.5)", 2, 1, 0.8, 0.9, 2)
vg1.addexpr("AWCL_soma.v(0.5)", 3, 1, 0.8, 0.9, 2)
//vg1.addexpr("SMDDR_p.v(0.2)", 4, 1, 0.8, 0.9, 2)
vg1.addexpr("SMDDR_p.v(0.9)", 8, 1, 0.8, 0.9, 2)
vg1.addexpr("SMDDR_mus.v(0.5)", 5, 1, 0.8, 0.9, 2)



vg2.addexpr("RIAL_.v(0.1)", 1, 1, 0.8, 0.9, 2)
//vg2.addexpr("RIAL_.v(0.3)", 2, 1, 0.8, 0.9, 2)
vg2.addexpr("RIAL_.v(0.6)", 2, 1, 0.8, 0.9, 2)
vg2.addexpr("RIAL_.v(0.65)", 5, 1, 0.8, 0.9, 2)
vg2.addexpr("RIAL_.v(0.8)", 3, 1, 0.8, 0.9, 2)
